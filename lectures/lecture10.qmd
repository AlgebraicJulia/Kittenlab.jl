# Lecture 10: Representables revisited {.unnumbered}

{{< include _preamble.qmd >}}

## Representable functors

The core of category theory is the idea that "everything you know" about an object is encapsulated by looking at the morphisms out of (or into) that object.

This intuition is captured in the formalism of representable functors, which we have talked about before but hasn't seemed to "take".

Before we (re)define representable functors, we're going to talk a little bit about the "type" of a representable functor.

We want to look at the morphisms out of an object. How can we express that information? One way would be to just have a set. But that doesn't tell us very much; that doesn't give us "handles" that we can use to process the information.

We can organize a little bit by splitting that set by *codomain*. Namely, for each object $Y \in \C$, we have a set of morphisms with codomain $Y$. So this looks like a function $F \colon \C \to \Set$. But when we have a morphism from $Y$ to $Z$, and a morphism into $Y$, then we can make a morphism into $Z$. Thus, for every $f \colon Y \to Z$, there is a function $F(f) \colon F(Y) \to F(Z)$. In other words, $F$ is a *functor* from $\C \to \Set$, or a $\C$-set, if you will.

So the "shape" of the information about all of the morphisms out of an object in $\C$ is a $\C$-set.

:::{.rmenv title="Example"}
Take the category $\Petri$ presented by the following diagram

```tikzcd
& S \\
I \ar[ur, "\mathrm{is}"] \ar[dr, swap, "\mathrm{it}"] & & O \ar[dl, "\mathrm{ot}"] \ar[ul, swap, "\mathrm{os}"] \\
& T
```

Then let $F$ be the $\Petri$-set of morphisms out of $S$. $F(S) = \{ \id_{S} \}$, and $F(x) = \emptyset$ for $x \in \{S,I,O\}$. Interpreted as a Petri net, $F$ is the single-species Petri net.

Now let $F$ be the $\Petri$-set of morphisms out of $I$. Then $F(S) = \{ \mathrm{is} \}$, $F(T) = \{\mathrm{it}\}$, $F(I) = \{ \id_{I} \}$. Interpreted as a Petri net, $F$ has a single species, a single transition, and one arc going from the species to the transition.
:::

We summarize what we've talked about so far in the following proposition.

:::{.rmenv title="Proposition"}
Given a category $\C$ and an object $X \in \C$, there is a $\C$-set $y_{\C}(X) \colon \C \to \Set$, such that $y_{\C}(X)(Y) = \Hom_{\C}(X,Y)$.
:::

We call $y_{\C}(X)$ the "representable functor at $X$". We're now going to talk about how to compute these representable functors in a special case.

## Computing representables with dynamic programming

Suppose that $\C$ is the path graph category for a graph $G$, so that an object of $\C$ is a vertex of $G$, and a morphism of $\C$ is a path in $G$.

Our goal is to be able to fix $a \in \C$, and then compute $\Hom_{\C}(a,b)$ for every $b$. Of course, if there are loops in $G$, then $\Hom_{\C}(a,b)$ could be infinite, so we're going to assume that $G$ is a directed acyclic graph.

This is going to be kind of like Dijkstra's algorithm, which computes the shortest path between different vertices, except instead of computing the shortest path, we're going to compute the set of *all* paths. But we're going to use a similar trick of expanding the problem to be computing all the paths between *all* pairs of vertices.

For this problem, we're going to use Catlab, because Catlab has some nice features for printing out graphs that I don't want to recreate.

```{julia}
# | output: true
using Pkg; Pkg.activate(".")
using Catlab
using Catlab.Graphs

g = path_graph(Graph, 10)  
```

```{julia}
# | output: true
using Catlab.Graphics

to_graphviz(g)
```

We will represent a path in a graph as a vector of edge ids.

```{julia}
const Path = Vector{Int}
```

Then we will write a function

```julia
function compute_paths(g::Graph)::Matrix{Set{Path}}
  ...
end
```

which returns an $n \times n$ matrix $P$, where $n$ is the number of vertices in the graph, $P_{v,w}$ is the set of paths from $v$ to $w$.

```{julia}
# | output: true
function compute_paths(g::Graph)
  n = nv(g) # the number of vertices in g
  P = [Set{Path}() for _ in 1:n, _ in 1:n]
  
  # add all of the identity paths
  for v in vertices(g)
    push!(P[v,v], Int[])
  end
  # at each iteration, we find the paths of length k
  # the longest paths are length n
  for k in 1:n
    for e in edges(g)
      s,t = src(g,e), tgt(g,e)
      for v in vertices(g)
        for p in P[v,s]
          if length(p) == k - 1
            push!(P[v,t], [p; e])
          end
        end
      end
    end
  end

  P
end

compute_paths(g)
```

Now, let's think about what this is saying mathematically. Let $G$ be the path graph with 10 vertices, and let $\C$ be the path category on $G$. $\C$ has objects $1,\ldots,10$, one morphism from $i$ to $j$ if $i \leq j$, and zero morphisms if $i > j$. Thus the representable $y_{\C}(i)$ is given by

\[ y_{\C}(i)(j) = \begin{cases}
                  1 & \text{if $i \leq j$} \\
                  \emptyset & \text{otherwise}
                \end{cases}
\]

Note that it's possible to have a function from $\emptyset$ to $1$, but not the other way around. So if there's a morphism from $x$ to $y$, and $F(x)$ is non-empty, then $F(y)$ has to also be non-empty.

This also implies that there can't be an isomorphism between $y_{\C}(i)$ and $y_{\C}(j)$ for $i \neq j$, because if $i < j$ then $y_{\C}(i)(i)$ is non-empty but $y_{\C}(j)(i)$ is empty.

This is a specific instance of the general phenomenon that looking at all of the morphisms out of an object characterizes that object.

## Characterizing objects using C-sets

Previously, we have gone from objects of $\C$ to $\C$-sets, taking $x \in \C$ to $y_\C(x)$. But we can also ask the question, given an arbitrary $F \colon \C \to \Set$, is there an $x \in \C$ such that $y_\C(x) \cong F$? We ask this question by saying "does $F$ have a representative?"

:::{.rmenv title="Example (non-mathematical)"}
Suppose you come back from a party, and you had a really good time talking to someone but you can't remember their name. But you do remember the conversations that the person had with the other people at the party. So you call up a friend, and you ask "who was that person who was had 3 conversations with Alice, 2 conversations with Bob, and didn't talk to Eve at all?" Your friend might say "oh, that was Roberta", or might say "you must have been drunk; nobody had that sequence of conversations."

Of course, there might be several people of that description, and no two people are really "isomorphic", but the basic idea is still there. You can generally identify someone by how they relate to other people. Finding a representing object for a $\C$-set is conceptually the same process; the $\C$-set is the description of how the object relates to other objects.
:::

:::{.rmenv title="Example"}
Consider the functor $U$ from $\Vect$ to $\Set$ which sends a vector space $V$ to its underlying set, and a linear map $f \colon V \to W$ to its underlying function. Think for a second, is there a representing object for this functor?

Yes: one representing object for this functor is the vector space $\R$. What does this mean precisely? This means that there is an natural isomorphism between the functors $y_{\Vect}(\R)$ and $U$. That is, for every vector space $V$, there is an isomorphism between the set $y_{\Vect}(\R)(V) = \Hom_{\Vect}(\R,V)$ and the set $V$.

We construct this isomorphism in the following way. Given a linear map $f \colon \R \to V$, there is a corresponding element $f(1) \in V$, and given an element $v \in V$, there is a unique linear map $f \colon \R \to V$ such that $f(1) = v$. Let $\alpha_{V} \colon y_{\Vect}(\R)(V) \to U(V)$ and $\alpha_{V}^{-1} \colon U(V) \to y_{\Vect}(\R)(V)$ be these maps.

We then need to also check the naturality toblerone for $\alpha$. We won't do this every time, but it's good practice.

Let $V$ and $W$ be vector spaces, and let $g \colon U \to V$ be a map between them. Then the bottom of the naturality toblerone for $g$ is

```tikzcd
y_{\mathsf{Vect}}(\mathbb{R})(V) \ar[r, "\alpha_V"] \ar [d, swap, "y_{\mathsf{Vect}}(\mathbb{R})(g)"] & U(V) \ar[d, "U(g)"]\\
y_{\mathsf{Vect}}(\mathbb{R})(W) \ar[r, "\alpha_W"] & U(W)
```

Remember that the action of $y_{\Vect}(\R)$ on morphisms is composition. So if we start out with $f \colon \R \to V$, and take the left-bottom route, we first get $g \circ f \in y_{\Vect}(\R)(W)$, and then get $(g \circ f)(1) \in U(W)$. If we take the top-right route, we first get $f(1) \in U(V)$, and then get $g(f(1)) \in U(W))$. As $(g \circ f)(1) = g(f(1))$, the square commutes! So $\alpha$ is a natural transformation. We can similarly prove that $\alpha^{-1}$ is a natural transformation, and it is clear that $\alpha$ and $\alpha^{-1}$ are inverses, so $U$ and $y_{\Vect}(\mathbb{R})$ are naturally isomorphic, as required.
:::

:::{.rmenv title="Example"}
Consider the functor $F$ from $\Vect$ to $\Set$ which sends every vector space to the singleton set $1$. Is there a representing object for this functor?

Yes, the representing object for this functor is the vector space $\R^{0}$, because there is precisely one linear map $\R^{0} \to V$ for any vector space $V$.
:::

:::{.rmenv title="Example"}
Consider the poset $(\Q_{\geq 0}, \leq)$ as a category. Then define $F \colon \Q_{\geq 0} \to \Set$ by

\[
F(x) = \begin{cases}
         1 & \text{if $2 \leq x^{2}$} \\
         \emptyset & \text{otherwise}
       \end{cases}
\]

You can check that if $x \leq x'$, then $F(x') = \emptyset$ if and only if $F(x) = \emptyset$, so we can make $F$ into a functor by supplying the unique functions $\emptyset \to 1$ and $1 \to 1$ for $F(x) \to F(x')$; we never have to make a function $1 \to \emptyset$, which would be impossible.

A representative for $F$ would be a rational number $q \geq 0$ such that $2 \leq x^{2}$ if and only if $q \leq x$. One canditate for this would be $\sqrt{2}$, but $\sqrt{2}$ isn't rational! It turns out that no such $q$ exists, so there is no representative for $F$!

However, if we consider a similar situation with the poset $(\R_{\geq 0}, \leq)$ instead, then $F$ would be representable!

So we see that representability has many surprising and non-trivial applications.
:::

